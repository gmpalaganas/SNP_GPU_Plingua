/* Generated By:JavaCC: Do not edit this line. PlinguaJavaCcParserConstants.java */
package org.gcn.plinguacore.parser.input.plingua;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PlinguaJavaCcParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTISET = 8;
  /** RegularExpression Id. */
  int FIRST_MULTISET = 9;
  /** RegularExpression Id. */
  int SECOND_MULTISET = 10;
  /** RegularExpression Id. */
  int DEF = 11;
  /** RegularExpression Id. */
  int CALL = 12;
  /** RegularExpression Id. */
  int LET = 13;
  /** RegularExpression Id. */
  int MU = 14;
  /** RegularExpression Id. */
  int MEMB_IN = 15;
  /** RegularExpression Id. */
  int MEMB_OUT = 16;
  /** RegularExpression Id. */
  int LOG = 17;
  /** RegularExpression Id. */
  int FLOOR = 18;
  /** RegularExpression Id. */
  int CEIL = 19;
  /** RegularExpression Id. */
  int ROUND = 20;
  /** RegularExpression Id. */
  int DISSOLVES = 21;
  /** RegularExpression Id. */
  int VARIANT = 22;
  /** RegularExpression Id. */
  int DEBUG = 23;
  /** RegularExpression Id. */
  int MARCS = 24;
  /** RegularExpression Id. */
  int MDICT = 25;
  /** RegularExpression Id. */
  int MINST = 26;
  /** RegularExpression Id. */
  int MSEQ = 27;
  /** RegularExpression Id. */
  int MASYNCH = 28;
  /** RegularExpression Id. */
  int MVALID = 29;
  /** RegularExpression Id. */
  int STRING = 30;
  /** RegularExpression Id. */
  int ID = 31;
  /** RegularExpression Id. */
  int DOLLAR = 32;
  /** RegularExpression Id. */
  int QUOTE = 33;
  /** RegularExpression Id. */
  int ARROW = 34;
  /** RegularExpression Id. */
  int DOUBLE_ARROW = 35;
  /** RegularExpression Id. */
  int DOT = 36;
  /** RegularExpression Id. */
  int NATURAL_NUMBER = 37;
  /** RegularExpression Id. */
  int NUMBER = 38;
  /** RegularExpression Id. */
  int EMPTY = 39;
  /** RegularExpression Id. */
  int SEPARATOR = 40;
  /** RegularExpression Id. */
  int LBRACE = 41;
  /** RegularExpression Id. */
  int RBRACE = 42;
  /** RegularExpression Id. */
  int COMMA = 43;
  /** RegularExpression Id. */
  int LSQUARE = 44;
  /** RegularExpression Id. */
  int RSQUARE = 45;
  /** RegularExpression Id. */
  int LPAR = 46;
  /** RegularExpression Id. */
  int RPAR = 47;
  /** RegularExpression Id. */
  int COLON = 48;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 49;
  /** RegularExpression Id. */
  int PLUS = 50;
  /** RegularExpression Id. */
  int MINUS = 51;
  /** RegularExpression Id. */
  int MUL = 52;
  /** RegularExpression Id. */
  int DIV = 53;
  /** RegularExpression Id. */
  int MOD = 54;
  /** RegularExpression Id. */
  int POW = 55;
  /** RegularExpression Id. */
  int ASIG = 56;
  /** RegularExpression Id. */
  int LESS_THAN = 57;
  /** RegularExpression Id. */
  int GREATER_THAN = 58;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL_THAN = 59;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL_THAN = 60;
  /** RegularExpression Id. */
  int DIFF = 61;
  /** RegularExpression Id. */
  int INC = 62;
  /** RegularExpression Id. */
  int OR = 63;
  /** RegularExpression Id. */
  int STRING_OBJECT = 64;
  /** RegularExpression Id. */
  int MOUTRES_BINARY = 65;
  /** RegularExpression Id. */
  int MOUTRES_NATURAL = 66;
  /** RegularExpression Id. */
  int MOUTRES_SUMMATORIES = 67;
  /** RegularExpression Id. */
  int MASTB = 68;
  /** RegularExpression Id. */
  int MASTW = 69;
  /** RegularExpression Id. */
  int MASTFUNC = 70;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"/*\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"@ms\"",
    "\"@ms1\"",
    "\"@ms2\"",
    "\"def\"",
    "\"call\"",
    "\"let\"",
    "\"@mu\"",
    "\"@min\"",
    "\"@mout\"",
    "\"@log\"",
    "\"@floor\"",
    "\"@ceil\"",
    "\"@round\"",
    "\"@d\"",
    "\"@model\"",
    "\"@debug\"",
    "\"@marcs\"",
    "\"@mdict\"",
    "\"@minst\"",
    "\"@mseq\"",
    "\"@masynch\"",
    "\"@mvalid\"",
    "<STRING>",
    "<ID>",
    "\"$\"",
    "\"\\\'\"",
    "\"-->\"",
    "\"<-->\"",
    "\".\"",
    "<NATURAL_NUMBER>",
    "<NUMBER>",
    "\"#\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "<DOUBLE_COLON>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "<LESS_OR_EQUAL_THAN>",
    "<GREATER_OR_EQUAL_THAN>",
    "\"<>\"",
    "\"+=\"",
    "\"||\"",
    "<STRING_OBJECT>",
    "\"@moutres_binary\"",
    "\"@moutres_natural\"",
    "\"@moutres_summatories\"",
    "\"@mastb\"",
    "\"@mastw\"",
    "\"@mastfunc\"",
  };

}
